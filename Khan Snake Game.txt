/*
Welcome to my version of the game of Snake!

Snake has long been one of my favourite video games, so when I was thinking of making a game it was the obvious choice. I took inspiration for this game from other versions of snake that I have played combined with some of my own ideas to make what I think is a good version of the game.

This game has single and two player versions, so see how long you can last on your own or grab a friend and find out who's the snake master!

This is the first computer game I have created, so I would genuinely love to hear your experience and feedback. Seriously, even if it's later then 2050, shoot me a message, I'll be happy to hear that you played this game!

Send me a screenshot of your high score to have it officially added to the high scores!

There are probably still bugs and incorrect behaviour in this code. If you find anything that isn't working or seems to be working incorrectly, please let me know as much as you can about it; that will help me improve this game.

I hope you enjoy playing this game as much as I did making it!
Happy slithering!
*/

/*
Updates and Fixes:

2020 May 30
- Fixed tie in two player when both players crash and one is longer than the other.

2020 Jun 25
- Black status bar no longer fades when game ends.
- Added up and down arrow scroll support on Guide screen.
*/
noStroke();
noCursor();

//Mouse and keys
{
var key_pressed = false;
var pressed_key = 39;
var paused = false;
var shift_held = false;
var player_one_key_pressed = false;
var player_two_key_pressed = false;

//Do when any key is pressed
keyPressed = function() {
    key_pressed = true;
    pressed_key = keyCode;
    
    if(keyCode === 16) {
        shift_held = true;
        
    }
    if(keyCode === 32) {
        if(!paused) {
            paused = true;
            
        } else {
            paused = false;
            
        }
        
    }
    
    if(keyCode === 87 || keyCode === 83) {
        player_one_key_pressed = true;
        
    }
    if(keyCode === 38 || keyCode === 40) {
        player_two_key_pressed = true;
        
    }
};

//Do when any key is released
keyReleased = function() {
    key_pressed = false;
    
    if(keyCode === 16) {
        shift_held = false;
        
    }
    
};

//Do when the mouse is released
var mouse_released = false;
mouseReleased = function() {
    
    if(mouseButton === LEFT) {
        mouse_released = true;
        
    }
    
};

//Do when the mouse is scrolled
var scroll_value = 0;
mouseScrolled = function() {
    
    if((scroll_value < 0 || mouseScroll < 0) && (scroll_value >= -70 || mouseScroll > 0)) {
        scroll_value += mouseScroll;
        
    }
    
    if(scroll_value <= -74) {
        scroll_value = -72;
        
    }
    if(scroll_value > 0) {
        scroll_value = 0;
        
    }
    
};
}

//Buttons
{
var Button = function (XPosition, YPosition, Width, Height, R1, G1, B1, R2, G2, B2,  Text, TextSize, XOffset, YOffset) {
    this.XPosition = XPosition;
    this.YPosition = YPosition;
    this.Width = Width;
    this.Height = Height;
    this.Text = Text;
    this.TextSize = TextSize;
    this.XOffset = XOffset;
    this.YOffset = YOffset;
    this.R1 = R1;
    this.G1 = G1;
    this.B1 = B1;
    this.R2 = R2;
    this.G2 = G2;
    this.B2 = B2;
    
};

//Home button variables
var home = true; //true
var one_player_pressed = false; //false
var two_player_pressed = false;
var two_player = false; //false
var settings = false; //false
var guide = false; //false

//Settings button variables
var back = false; //And Guide
var over_back = false;
var difficulty = "Normal";
var wall_collisions = false; //false
var player1_colour = "White";
var player2_colour = "Black";
var delay_timer = millis(); //Need button timer on player 1 red, orange, and yellow so that they aren't immediately clicked when settings button is clicked

//One player button variables
var player1_snake_stopped = true;

//Game over button variables
var play_again = false;
var go_home = false;
var initials_pressed = false;

//Enter names screen button variables
var continue_pressed = false;
var enter_player_one_name = false;
var enter_player_two_name = false;

//Guide screen button variablres
var scroll_button_pressed = false;
var click_y_position = 0;
var back_home = false;

//How to draw the buttons
Button.prototype.draw = function () {
    
    if(this.Text === "Scroll" && mouseIsPressed) {
        scroll_button_pressed = true;
        this.R2 = 120;
        this.G2 = 120;
        this.B2 = 120;
        
    } else {
        scroll_button_pressed = false;
        
        if(!mouseIsPressed) {
            click_y_position = mouseY;
            
        }
        
        if(this.Text === "Scroll") {
            this.R2 = 150;
            this.G2 = 150;
            this.B2 = 150;
            
        }
    }
    
    if (mouseX >= this.XPosition && mouseX <= this.XPosition + this.Width && mouseY >= this.YPosition && mouseY <= this.YPosition + this.Height) {
        over_back = true;
        
        fill(this.R2, this.G2, this.B2);
        rect(this.XPosition, this.YPosition, this.Width, this.Height);
        
        if (mouseIsPressed && mouseButton === LEFT) {
            if(this.Text !== "Back" && this.Text !== "Initials" && this.Text !== "Player one name" && this.Text !== "Player two name" && this.Text !== "Scroll") {
                
                fill(this.R2 - 32, this.G2 - 32, this.B2 - 32);
                
            }
            rect(this.XPosition, this.YPosition, this.Width, this.Height);
            fill(this.R2, this.G2, this.B2);
            rect(this.XPosition + 1.5, this.YPosition + 1.5, this.Width - 4, this.Height - 4);
        } 
        
        //Button functionality
        var button_text = this.Text;
        if(mouse_released) {
            
            if(button_text === "1 Player") {
                one_player_pressed = true;
                home = false;
                player1_snake_stopped = true;
                keyCode = 37;
                
            } else if(button_text === "2 Player") {
                two_player_pressed = true;
                home = false;
                
            } else if(button_text === "Settings") {
                settings = true;
                home = false;
                delay_timer = millis();
                
            } else if(button_text === "Guide") {
                guide = true;
                home = false;
                
            } else if(button_text === "Back") {
                home = true;
                settings = false;
                guide = false;
                back_home = true;
                
            } else if(button_text === "Easy") {
                difficulty = "Easy";
                
            } else if(button_text === "Normal") {
                difficulty = "Normal";
                
            } else if(button_text === "Hard") {
                difficulty = "Hard";
                
            } else if(button_text === "On") {
                wall_collisions = true;
                
            } else if(button_text === "Off") {
                wall_collisions = false;
                
            } else if(button_text === "p1_red" && millis() > delay_timer + 50) {
                player1_colour = "Red";
                
            } else if(button_text === "p1_orange" && millis() > delay_timer + 50) {
                player1_colour = "Orange";
                
            } else if(button_text === "p1_yellow" && millis() > delay_timer + 50) {
                player1_colour = "Yellow";
                
            } else if(button_text === "p1_green") {
                player1_colour = "Green";
                
            } else if(button_text === "p1_blue") {
                player1_colour = "Blue";
                
            } else if(button_text === "p1_purple") {
                player1_colour = "Purple";
                
            } else if(button_text === "p1_black") {
                player1_colour = "Black";
                
            } else if(button_text === "p1_white") {
                player1_colour = "White";
                
            } else if(button_text === "p2_red") {
                player2_colour = "Red";
                
            } else if(button_text === "p2_orange") {
                player2_colour = "Orange";
                
            } else if(button_text === "p2_yellow") {
                player2_colour = "Yellow";
                
            } else if(button_text === "p2_green") {
                player2_colour = "Green";
                
            } else if(button_text === "p2_blue") {
                player2_colour = "Blue";
                
            } else if(button_text === "p2_purple") {
                player2_colour = "Purple";
                
            } else if(button_text === "p2_black") {
                player2_colour = "Black";
                
            } else if(button_text === "p2_white") {
                player2_colour = "White";
                
            } else if(button_text === "Play again") {
                play_again = true;
                
            } else if(button_text === "Home") {
                go_home = true;
                
            } else if(button_text === "Initials") {
                initials_pressed = true;
                
            } else if(button_text === "Continue") {
                continue_pressed = true;
                
            } else if(button_text === "Player one name"){
                enter_player_one_name = true;
                
            } else if(button_text === "Player two name") {
                enter_player_two_name = true;
                
            } else if(this.Text === "Scroll") {
                scroll_button_pressed = false;
                
            }
        }
        
    } else {
        over_back = false;
        
        fill(this.R1, this.G1, this.B1);
        rect(this.XPosition, this.YPosition, this.Width, this.Height);
        
    }
    
    fill(0, 0, 0);
    textSize(this.TextSize);
    text(this.Text, this.XPosition + this.XOffset, this.YPosition + this.YOffset);

};
}

//Snake Segments
{
var rotation = 0;
var P2_rotation = 0;
var eyes = true;
var P2_eyes = true;
var drawing_second_head = false; //Kind of cheating

var Head = function(position, colour, draw_eyes, side) {
    this.position = position;
    this.colour = colour;
    this.draw_eyes = draw_eyes;
    this.side = side;
    
};

//Draw the snake head segment
Head.prototype.draw = function() {
    var x_position = 0;
    var y_position = 0;
    
    if(drawing_second_head) {
        rotate(P2_rotation);
        
        if(P2_rotation === 90) {
            x_position = Math.ceil(this.position / 40 - 1) * 10 + 5;
            y_position = -((this.position - 1) % 40) * 10 - 5;
            
        } else if (P2_rotation === -90) {
            x_position = -Math.ceil(this.position / 40) * 10 + 5;
            y_position = ((this.position - 1) % 40) * 10 + 5;
            
            
        } else {
            x_position = ((this.position - 1) % 40) * 10 + 5;
            y_position = Math.ceil(this.position / 40 - 1) * 10 + 5;
        
        }
        
    } else {
        rotate(rotation);
        
        if(rotation === 90) {
            x_position = Math.ceil(this.position / 40 - 1) * 10 + 5;
            y_position = -((this.position - 1) % 40) * 10 - 5;
            
        } else if (rotation === -90) {
            x_position = -Math.ceil(this.position / 40) * 10 + 5;
            y_position = ((this.position - 1) % 40) * 10 + 5;
            
            
        } else {
            x_position = ((this.position - 1) % 40) * 10 + 5;
            y_position = Math.ceil(this.position / 40 - 1) * 10 + 5;
        
        }
        
    }
    
    if(this.colour === "Black") {
        fill(0, 0, 0); //Feature colour = white
        
    }
    if(this.colour === "White") {
        fill(255, 255, 255); //Feature colour = black
        
    }
    if(this.colour === "Red") {
        fill(220, 0, 0); //Feature colour = black
        
    }
    if(this.colour === "Orange") {
        fill(239, 124, 0); //Black
        
    }
    if(this.colour === "Yellow") {
        fill(239, 239, 0); //Black
        
    }
    if(this.colour === "Green") {
        fill(0, 112, 0); //Black
        
    }
    if(this.colour === "Blue") {
        fill(0, 0, 205); //White
        
    }
    if(this.colour === "Purple") {
        fill(95, 0, 104); //White
        
    }
    if(this.colour === "Easter") {
        
        if(this.position % 7 === 0) {
            fill(255, 0, 0);
            
        }
        if(this.position % 7 === 1) {
            fill(255, 127, 0);
            
        }
        if(this.position % 7 === 2) {
            fill(255, 255, 0);
            
        }
        if(this.position % 7 === 3) {
            fill(0, 255, 0);
            
        }
        if(this.position % 7 === 4) {
            fill(0, 0, 255);
            
        }
        if(this.position % 7 === 5) {
            fill(75, 0, 130);
            
        }
        if(this.position % 7 === 6) {
            fill(148, 0, 211);
            
        }
    }
    
    ellipse (x_position, y_position , 10, 10);
    
    if(this.colour === "Black" || this.colour === "Blue" || this.colour === "Purple") {
        fill(255, 255, 255);
        stroke(255, 255, 255);
        
        
    } else {
        fill(0, 0, 0);
        stroke(0, 0, 0);
        
    }
    
    //How to draw the face
    if(this.side === "Right") {
        
        if(this.draw_eyes) {
            
            ellipse(x_position + 1.5, y_position - 1.5, 2, 2);
            
        } else {
            
            strokeWeight(0.4);
            line(x_position + 0.4, y_position - 2.6, x_position + 2.6, y_position - 0.4);
            line(x_position + 2.5, y_position - 3.2, x_position - 0.2, y_position);
            
        }
        
        
        noFill();
        strokeWeight(1);
        arc(x_position + 2.5, y_position - 0.2, 8, 7, 75, 144);
        noStroke();
        
    } else {
        
        if(this.draw_eyes) {
            
            ellipse(x_position - 1.5, y_position - 1.5, 2, 2);
            
        } else {
            
            strokeWeight(0.4);
            line(x_position - 2.6, y_position - 2.6, x_position - 0.4, y_position - 0.4);
            line(x_position - 0.5, y_position - 3.2, x_position - 3.2, y_position);
           
        }
        
        noFill();
        strokeWeight(1);
        arc(x_position - 2.5, y_position - 0.2, 8, 7, 25, 116);
        noStroke();
        
    }
    
    if(drawing_second_head) {
        rotate(-P2_rotation);
        
    } else {
        rotate(-rotation);
        
    }
    
};
    
var BodySegment = function(position, colour) {
    this.position = position;
    this.colour = colour;
    
};

//How to draw the body segments
BodySegment.prototype.draw = function() {
    
    var x_position = ((this.position - 1) % 40) * 10 + 5;
    var y_position = Math.ceil(this.position / 40 - 1) * 10 + 5;
    
    if(this.colour === "Black") {
        fill(0, 0, 0); //Feature colour = white
        
    }
    if(this.colour === "White") {
        fill(255, 255, 255); //Feature colour = black
        
    }
    if(this.colour === "Red") {
        fill(220, 0, 0); //Feature colour = black
        
    }
    if(this.colour === "Orange") {
        fill(239, 124, 0); //Black
        
    }
    if(this.colour === "Yellow") {
        fill(239, 239, 0); //Black
        
    }
    if(this.colour === "Green") {
        fill(0, 112, 0); //Black
        
    }
    if(this.colour === "Blue") {
        fill(0, 0, 205); //White
        
    }
    if(this.colour === "Purple") {
        fill(95, 0, 104); //White
        
    }
    if(this.colour === "Food") {
        fill(117, 48, 60);
        
    }
    if(this.colour === "Easter") {
        
        if(this.position % 7 === 0) {
            fill(255, 0, 0);
            
        }
        if(this.position % 7 === 1) {
            fill(255, 127, 0);
            
        }
        if(this.position % 7 === 2) {
            fill(255, 255, 0);
            
        }
        if(this.position % 7 === 3) {
            fill(0, 255, 0);
            
        }
        if(this.position % 7 === 4) {
            fill(0, 0, 255);
            
        }
        if(this.position % 7 === 5) {
            fill(75, 0, 130);
            
        }
        if(this.position % 7 === 6) {
            fill(148, 0, 211);
            
        }
    }
    
    ellipse (x_position, y_position , 10, 10);
    
};
}

//Home screen variables
{
    //Highest = 15190
    var high_score_initials = ["MEK", "ZOW", "JOE", "AMK", "AMK", "AMK", "AMK", "AMK", "AMK", "AMK"];
    var high_scores = [1440, 1150, 1030, 990, 560, 450, 450, 430, 320, 220];
    var One_player_button = new Button (33, 324, 150, 60, 98, 107, 112, 110, 119, 124, "1 Player", 30, 20, 39);
    var Two_player_button = new Button (217, 324, 150, 60, 98, 107, 112, 110, 119, 124, "2 Player", 30, 20, 39);
    var Settings_button = new Button (18, 260, 84, 38, 98, 107, 112, 110, 119, 124, "Settings", 18, 10, 25);
    var Instructions_button = new Button (293, 260, 84, 38, 98, 107, 112, 110, 119, 124, "Guide", 18, 18 , 25);
    var home_snake_segments = [];
    home_snake_segments.push(new Head(314, "White", true,  "Right"));
    for(var i = 1; i < 28; i++) {
        
        home_snake_segments.push(new BodySegment(314 - i, "White"));
        
    }
    var number = 0; //Used for easter message
    var update_timer = millis();
    var right = true;
    var down = false;
    var left = false;
    var up = false;
    var key_codes = [39];
    var easter_food = new BodySegment(673, "Food");
    var draw_easter_food = false;
    var speed = 175; //Smaller is faster
    var easter_eat = false;
    var R_val = [255, 255, 255, 255, 255, 255, 255, 255, 255, 192, 128, 64, 0, 0, 0, 0, 0, 19, 38, 57, 75, 116, 157, 198, 238, 243, 247, 251]; //Unused
    var G_val = [0, 41, 83, 124, 165, 188, 211, 234, 255, 224, 192, 160, 128, 96, 64, 32, 0, 0, 0, 0, 0, 33, 65, 98, 130, 98, 65, 33]; //Unused
    var B_val = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 128, 192, 255, 224, 193, 162, 130, 157, 184, 211, 238, 179, 119, 60]; //Unused
    var home_crash = false;
    var one_player = false;
    
    var test_timer = millis();
    var timed_time = 0;
    var cheating = false;
    var override_cheat = false;
    var fill_white = false;
    var delay_start = millis();
    
}
//Settings screen variables
{
    var back_button = new Button (6, 13, 40, 34, 140, 140, 140, 141, 141, 141, "Back", 0, 10, 20);
    var difficulty_easy = new Button (8, 125, 60, 30, 90, 90, 90, 106, 106, 106, "Easy", 18, 10, 21);
    var difficulty_normal = new Button (69, 125, 60, 30, 90, 90, 90, 106, 106, 106, "Normal", 18, 1, 21);
    var difficulty_hard = new Button (130, 125, 60, 30, 90, 90, 90, 106, 106, 106, "Hard", 18, 11, 21);
    var wall_collisions_on = new Button (239, 125, 60, 30, 90, 90, 90, 106, 106, 106, "On", 18, 18, 21);
    var wall_collisions_off = new Button (301, 125, 60, 30, 90, 90, 90, 106, 106, 106, "Off", 18, 17, 21);
    var player1_red = new Button (5, 263, 30, 30, 220, 0, 0, 245, 16, 16, "p1_red", 0, 2, 21);
    var player1_orange = new Button (37, 263, 30, 30, 239, 124, 0, 255, 140, 16, "p1_orange", 0, 2, 21);
    var player1_yellow = new Button (69, 263, 30, 30, 239, 239, 0, 255, 255, 16, "p1_yellow", 0, 2, 21);
    var player1_green = new Button (101, 263, 30, 30, 0, 112, 0, 16, 128, 16, "p1_green", 0, 2, 21);
    var player1_blue = new Button (133, 263, 30, 30, 0, 0, 205, 16, 16, 221, "p1_blue", 0, 2, 21);
    var player1_purple = new Button (165, 263, 30, 30, 95, 0, 140, 111, 16, 156, "p1_purple", 0, 2, 21);
    var player1_black = new Button (69, 327, 30, 30, 0, 0, 0, 45, 45, 45, "p1_black", 0, 2, 21);
    var player1_white = new Button (101, 327, 30, 30, 255, 255, 255, 239, 239, 239, "p1_white", 0, 2, 21);
    var player2_red = new Button (205, 263, 30, 30, 220, 0, 0, 245, 16, 16, "p2_red", 0, 2, 21);
    var player2_orange = new Button (237, 263, 30, 30, 239, 124, 0, 255, 140, 16, "p2_orange", 0, 2, 21);
    var player2_yellow = new Button (269, 263, 30, 30, 239, 239, 0, 255, 255, 16, "p2_yellow", 0, 2, 21);
    var player2_green = new Button (301, 263, 30, 30, 0, 112, 0, 16, 128, 16, "p2_green", 0, 2, 21);
    var player2_blue = new Button (333, 263, 30, 30, 0, 0, 205, 16, 16, 221, "p2_blue", 0, 2, 21);
    var player2_purple = new Button (365, 263, 30, 30, 95, 0, 140, 111, 16, 156, "p2_purple", 0, 2, 21);
    var player2_black = new Button (269, 327, 30, 30, 0, 0, 0, 45, 45, 45, "p2_black", 0, 2, 21);
    var player2_white = new Button (301, 327, 30, 30, 255, 255, 255, 239, 239, 239, "p2_white", 0, 2, 21);
    var difficulty_indicator_x = 99;
    var difficulty_indicator_speed = 0;
    var wall_collisions_indicator_x = 331;
    var wall_collisions_indicator_speed = 0;
    var player1_colour_indicator_x = 0;
    var player1_colour_indicator_y = 0;
    var player1_colour_indicator_speed = 0;
    var player2_colour_indicator_x = 0;
    var player2_colour_indicator_y = 0;
    var player2_colour_indicator_speed = 0;
    
}
//One player variables
{
 var score = 0;
 var one_player_snake = [];
 one_player_snake.push(new Head(820, "White", true,  "Right"));
 one_player_snake.push(new BodySegment(819, "White"));
 one_player_snake.push(new BodySegment(818, "White"));
 var one_player_crash = false;
 var available_positions = [];
 var old_positions = [];
 var covered_positions = [818, 819, 820];
 for(var i = 81; i < 1601; i++) {
    
    if(i !== 820 && i !== 819 && i !== 818) {
        
        available_positions.push(i);
        
    }
    
 }
 var random_number = floor(random(81, available_positions.length + 0.9));
 var food = new BodySegment(available_positions[random_number], "Food");
 var eat = false;
 var old_tail_position = 818;
 var add_length = false;
 var perfect_game = false;
 var add_code = true;
 
}
//Two player variables
{
var player_one_name = "Player one";
var player_two_name = "Player two";
var enter_names = false;
var names_entered = false;
var two_player_snake1 = [];
two_player_snake1.push(new Head(812, player1_colour, true,  "Right"));
two_player_snake1.push(new BodySegment(811, player1_colour));
two_player_snake1.push(new BodySegment(810, player1_colour));
var two_player_snake2 = [];
two_player_snake2.push(new Head(829, player2_colour, true,  "Left"));
two_player_snake2.push(new BodySegment(830, player2_colour));
two_player_snake2.push(new BodySegment(831, player2_colour));
var before_start = true;
var two_player_available_positions = [];
var two_player_old_positions = [];
for(var i = 81; i < 1601; i++) {
    
    if(i !== 812 && i !== 811 && i !== 810 && i !== 829 && i !== 830 && i !== 831) {
        
        two_player_available_positions.push(i);
        
    }

}
var snake_one_add_code = true;
var snake_two_add_code = true;
var snake_two_key_codes = [];
var snake_two_left = true;
var snake_two_up = false;
var snake_two_right = false;
var snake_two_down = false;
var snake_one_old_tail_position = 810;
var snake_two_old_tail_position = 831;
var two_player_random_number = floor(random(81, two_player_available_positions.length + 0.9));
var two_player_food = new BodySegment(two_player_available_positions[two_player_random_number], "Food");
var snake_one_eat = false;
var snake_two_eat = false;
var snake_one_add_length = false;
var snake_two_add_length = false;
var snake_one_crash = false;
var snake_two_crash = false;
var both_crash = false;
var wall_crash = false;
var head_on_top = 0;
var player_one_win = false;
var player_two_win = false;
var tie = false;
    
}
//Enter names variables
{
    var continue_button = new Button (152, 280, 96, 34, 78, 87, 92, 90, 99, 104, "Continue", 21, 6, 24);
    var player_one_name_button = new Button (92, 161, 224, 34, 255, 255, 255, 255, 255, 255, "Player one name", 0, 47, 29);
    var player_two_name_button = new Button (92, 234, 224, 34, 255, 255, 255, 255, 255, 255, "Player two name", 0, 47, 29);
    var player_one_name_text = "";
    var player_two_name_text = "";
    var old_name = "";
    var player_one_Is = 0;
    var player_two_Is = 0;
    var player_one_capitals = 0;
    var player_two_capitals = 0;
    var backspace = false;
    
}
//End game variables
{
    var game_over = false; //false
    var end_delay = -40; //-40
    var delay_time = 80; // 80
    var play_again_button = new Button (87, 299, 110, 45, 78, 87, 92, 90, 99, 104, "Play again", 21, 6, 29);
    var home_screen_button = new Button (204, 299, 110, 45, 78, 87, 92, 90, 99, 104, "Home", 21, 27, 29);
    var point_plural = "s";
    var initials_text = "";
    var initials = ["  ", "  ", "  "];
    var place = 0;
    var initials_button = new Button (155, 245, 90, 44, 255, 255, 255, 255, 255, 255, "Initials", 0, 47, 29);
    var Is = 0;
    var enter_pressed = false;
    var cheating2 = false; // Hidden here
    var check_cheating_initials = ["MEK", "ZOW", "JOE", "AMK", "AMK", "AMK", "AMK", "AMK", "AMK", "AMK"];
    
}
//Guide screen variables
{
    var back_button_2 = new Button (6, 13, 40, 34, 186, 163, 108, 187, 164, 109, "Back", 0, 10, 20);
    var text_y_position = 115;
    var text_x_position = 40;
    var guide_text = [
        "The goal of the game of Snake is",
        "to eat as many food items as",
        "possible and grow as large as you",
        "before dying. Every time you eat a",
        "food item you gain one section on",
        "your snake. When you run into a", 
        "section of your own snake (or the",
        "wall if that setting is enabled) you",
        "die. Press space to pause.",
        "",
        "Single Player:",
        "In the single player version, you",
        "control the direction of your snake",
        "with the W, A, S, and D keys or the",
        "arrow keys. Every time you eat a",
        "food item your score will increase",
        "dependent on the difficulty you",
        "have selected. For the three",
        "difficulty settings of easy, normal,",
        "and hard you will gain 6, 10, and",
        "14 points respectively.",
        "",
        "Two Player:",
        "In the two-player version, each",
        "player controls one snake; player",
        "one using the W, A, S, and D keys",
        "and player two using the arrow",
        "keys. The objective is to",
        "out-survive your opponent. A",
        "snake will die if it runs into itself,",
        "the other player’s snake, or the",
        "wall when that setting is selected.",
        "In the event that both snakes die",
        "at the same time, the winner is the",
        "longer snake; if both snakes are",
        "the same length there is a tie.",
        "",
        "Thanks for playing",
        "Good luck!"

        ];
        var scroll_button = new Button (350, 82 - ((70 / 285) * (text_y_position - 115)), 18, 136, 170, 170, 170, 150, 150, 150, "Scroll", 0, 6, 24);
        var old_Y_position = 0;
}

//Other functions
{
//Game grid
var game_grid = function() {
    //grid
    stroke(121, 156, 26);
    //Virtical
    for(var i = 0; i < 400; i++) {
        line(i*10,20,i*10,400);
    }
    //Horizontal
    for(var i = 2; i < 400; i++) {
        line(0,i*10,400,i*10);
    }
    noStroke();
};

//Update all the snakes
var update_snake = function(snake, top_row) {
    var old_head = snake[0].position;
    update_timer = millis();
    
    //Appropreatley use given key code
    if(snake !== two_player_snake2) {
        
        if((key_codes[0] === 37 || key_codes[0] === 65) && !right) {
            left = true;
            up = false;
            right = false;
            down = false;
            home_snake_segments[0].side = "Left";
            one_player_snake[0].side = "Left";
            two_player_snake1[0].side = "Left";
            rotation = 0;
            
        } else if ((key_codes[0] === 38 || key_codes[0] === 87) && !down) {
            if(right) {
                rotation = -90;
                
            }
            if(left) {
                rotation = 90;
                
            }
            up = true;
            left = false;
            right = false;
            down = false;
            
        } else if ((key_codes[0] === 39 || key_codes[0] === 68) && !left) {
            right = true;
            left = false;
            up = false;
            down = false;
            home_snake_segments[0].side = "Right";
            one_player_snake[0].side = "Right";
            two_player_snake1[0].side = "Right";
            rotation = 0;
            
        } else if ((key_codes[0] === 40 || key_codes[0] === 83) && !up) {
            if(right) {
                rotation = 90;
                
            }
            if(left) {
                rotation = -90;
                
            }
            down = true;
            left = false;
            up = false;
            right = false;
            
        }
        
        key_codes.shift();
    
    } else {
        
        if(snake_two_key_codes[0] === 37 && !snake_two_right) {
            snake_two_left = true;
            snake_two_up = false;
            snake_two_right = false;
            snake_two_down = false;
            two_player_snake2[0].side = "Left";
            P2_rotation = 0;
            
        } else if (snake_two_key_codes[0] === 38 && !snake_two_down) {
            if(snake_two_right) {
                P2_rotation = -90;
                
            }
            if(snake_two_left) {
                P2_rotation = 90;
                
            }
            snake_two_up = true;
            snake_two_left = false;
            snake_two_right = false;
            snake_two_down = false;
            
        } else if (snake_two_key_codes[0] === 39 && !snake_two_left) {
            snake_two_right = true;
            snake_two_left = false;
            snake_two_up = false;
            snake_two_down = false;
            two_player_snake2[0].side = "Right";
            P2_rotation = 0;
            
        } else if (snake_two_key_codes[0] === 40 && !snake_two_up) {
            if(snake_two_right) {
                P2_rotation = 90;
                
            }
            if(snake_two_left) {
                P2_rotation = -90;
                
            }
            snake_two_down = true;
            snake_two_left = false;
            snake_two_up = false;
            snake_two_right = false;
            
        }
        
        snake_two_key_codes.shift();
        
    }
    
    //Move snake one unit forwards
    for(var i = snake.length - 1; i > 0; i--) {
        
        snake[i].position = snake[i - 1].position;
        
    }
    
    //Move snake head in the correct direction
    if(snake !== two_player_snake2) {
        
        if(right) {
           
           snake[0].position++;
            
        } else if(down) {
            
            snake[0].position += 40;
            
        } else if(left) {
            
            snake[0].position--;
            
        } else if(up) {
            
            snake[0].position -= 40;
            
        }
        
    } else {
        
        if(snake_two_right) {
       
           snake[0].position++;
            
        } else if(snake_two_down) {
            
            snake[0].position += 40;
            
        } else if(snake_two_left) {
            
            snake[0].position--;
            
        } else if(snake_two_up) {
            
            snake[0].position -= 40;
            
        }
        
    }
    
    //Move snake through the walls
    if(old_head % 40 === 0 && snake[0].position % 40 === 1) {
        
        snake[0].position -= 40;
        
    }
    if(old_head % 40 === 1 && snake[0].position % 40 === 0) {
        
        snake[0].position += 40;
        
    }
    if(Math.ceil(old_head / 40) === top_row && Math.ceil(snake[0].position / 40) === (top_row - 1)) {
        
        snake[0].position += (1600 - (top_row - 1) * 40);
        
    }
    if(Math.ceil(old_head / 40) === 40 && Math.ceil(snake[0].position / 40) === 41) {
        
        snake[0].position -= (1600 - (top_row - 1) * 40);
        
    }
};

//Type out the crash message
var type_home_crash_message = function() {
    
    textSize(12);
    fill(255, 255, 255);
    if(number >= 35) {
        text("G", 18, 145);   
    }
    if(number >= 50) {
        text("o", 27, 145);
    }
    if(number >= 60) {
        text("o", 34, 145);
    }
    if(number >= 70) {
        text("d", 41, 145);
    }
    if(number >= 110) {
        text("l",50, 145);
    }
    if(number >= 125) {
        text("u", 53, 145);
    }
    if(number >= 135) {
        text("c", 60, 145);
    }
    if(number >= 145) {
        text("k", 66, 145);
    }
    if(number >= 200) {
        text("i", 75, 145);
    }
    if(number >= 215) {
        text("n", 78, 145);
    }
    if(number >= 230) {
        text("t", 88, 145);
    }
    if(number >= 235) {
        text("h", 92, 145);
    }
    if(number >= 240) {
        text("e", 99, 145);
    }
    if(number >= 265) {
        text("a", 18, 158);
    }
    if(number >= 280) {
        text("c", 24.5, 158);
    }
    if(number >= 300) {
        text("t", 31, 158);
    }
    if(number >= 310) {
        text("u", 34.5, 158);
    }
    if(number >= 325) {
        text("a", 41, 158);
    }
    if(number >= 335) {
        text("l", 48, 158);
    }
    if(number >= 350) {
        text("g", 53, 158);
    }
    if(number >= 365) {
        text("a", 60, 158);
    }
    if(number >= 375) {
        text("m", 67, 158);
    }
    if(number >= 385) {
        text("e", 77, 158);
    }
    if(number >= 390) {
        text(".", 84, 158);
    }
    if(number >= 395) {
        text(".", 87, 158);
    }
    if(number >= 400) {
        text(".", 90, 158);
    }
    if(number >= 425) {
        text("Y", 18, 171);
    }
    if(number >= 435) {
        text("o", 24.5, 171);
    }
    if(number >= 445) {
        text("u", 31, 171);
    }
    if(number >= 460) {
        text("w", 41, 171);
    }
    if(number >= 470) {
        text("i", 50, 171);
    }
    if(number >= 485) {
        text("l", 53, 171);
    }
    if(number >= 490) {
        text("l", 56, 171);
    }
    if(number >= 510) {
        text("n", 61, 171);
    }
    if(number >= 525) {
        text("e", 68, 171);
    }
    if(number >= 535) {
        text("e", 75, 171);
    }
    if(number >= 550) {
        text("d", 82, 171);
    }
    if(number >= 570) {
        text("i", 92, 171);
    }
    if(number >= 580) {
        text("t", 95, 171);
    }
    if(number >= 610) {
        text("!", 98.5, 171);
    }
};

//Reset the one player snake variables
var reset_one_player_snake = function() {
    score = 0;
    one_player_snake = [];
    one_player_snake.push(new Head(820, "White", true,  "Right"));
    one_player_snake.push(new BodySegment(819, "White"));
    one_player_snake.push(new BodySegment(818, "White"));
    one_player_crash = false;
    available_positions = [];
    old_positions = [];
    covered_positions = [818, 819, 820];
    for(var i = 81; i < 1601; i++) {
        
        if(i !== 820 && i !== 819 && i !== 818) {
            
            available_positions.push(i);
            
        }
        
    }
    random_number = floor(random(81, available_positions.length + 0.9));
    food = new BodySegment(random_number, "Food");
    eat = false;
    old_tail_position = 818;
    add_length = false;
    perfect_game = false;
    player1_snake_stopped = true;
    rotation = 0;
    one_player_snake[0].side = "Right";
    right = true;
    left = false;
    up = false;
    down = false;
    game_over = false;
    end_delay = -40;
    key_codes = [];
    pressed_key = 37;
    initials_text = "";
    initials = ["  ", "  ", "  "];
    place = 0;
    paused = false;
    
};

//Reset the home snake variables
var reset_home_snake = function() {
    key_codes = [39];
    home_snake_segments = [];
    home_snake_segments.push(new Head(314, player1_colour, true,  "Right"));
    for(var i = 1; i < 28; i++) {
        
        home_snake_segments.push(new BodySegment(314 - i, player1_colour));
        
    }
    draw_easter_food = false;
    right = true;
    rotation = 0;
    home_snake_segments[0].side = "Right";
    left = false;
    easter_eat = false;
    home_crash = false;
    back_home = false;
    pressed_key = 39;
};

//Add initials to the string when entering on the end screen
var add_initial = function () {
    
    if(pressed_key === 48) {
        initials[place] = '0';
        
    }
    if(pressed_key === 49) {
        initials[place] = '1';
        
    }
    if(pressed_key === 50) {
        initials[place] = '2';
        
    }
    if(pressed_key === 51) {
        initials[place] = '3';
        
    }
    if(pressed_key === 52) {
        initials[place] = '4';
        
    }
    if(pressed_key === 53) {
        initials[place] = '5';
        
    }
    if(pressed_key === 54) {
        initials[place] = '6';
        
    }
    if(pressed_key === 55) {
        initials[place] = '7';
        
    }
    if(pressed_key === 56) {
        initials[place] = '8';
        
    }
    if(pressed_key === 57) {
        initials[place] = '9';
        
    }
    if(pressed_key === 65) {
        initials[place] = 'A';
        
    }
    if(pressed_key === 66) {
        initials[place] = 'B';
        
    }
    if(pressed_key === 67) {
        initials[place] = 'C';
        
    }
    if(pressed_key === 68) {
        initials[place] = 'D';
        
    }
    if(pressed_key === 69) {
        initials[place] = 'E';
        
    }
    if(pressed_key === 70) {
        initials[place] = 'F';
        
    }
    if(pressed_key === 71) {
        initials[place] = 'G';
        
    }
    if(pressed_key === 72) {
        initials[place] = 'H';
        
    }
    if(pressed_key === 73) {
        initials[place] = 'I';
        
    }
    if(pressed_key === 74) {
        initials[place] = 'J';
        
    }
    if(pressed_key === 75) {
        initials[place] = 'K';
        
    }
    if(pressed_key === 76) {
        initials[place] = 'L';
        
    }
    if(pressed_key === 77) {
        initials[place] = 'M';
        
    }
    if(pressed_key === 78) {
        initials[place] = 'N';
        
    }
    if(pressed_key === 79) {
        initials[place] = 'O';
        
    }
    if(pressed_key === 80) {
        initials[place] = 'P';
        
    }
    if(pressed_key === 81) {
        initials[place] = 'Q';
        
    }
    if(pressed_key === 82) {
        initials[place] = 'R';
        
    }
    if(pressed_key === 83) {
        initials[place] = 'S';
        
    }
    if(pressed_key === 84) {
        initials[place] = 'T';
        
    }
    if(pressed_key === 85) {
        initials[place] = 'U';
        
    }
    if(pressed_key === 86) {
        initials[place] = 'V';
        
    }
    if(pressed_key === 87) {
        initials[place] = 'W';
        
    }
    if(pressed_key === 88) {
        initials[place] = 'X';
        
    }
    if(pressed_key === 89) {
        initials[place] = 'Y';
        
    }
    if(pressed_key === 90) {
        initials[place] = 'Z';
        
    }
    if(pressed_key === 8) {
        initials[place - 1] = "  ";
        
        
    }
    if(pressed_key === 10) {
        enter_pressed = true;
        
    }
    
    place = 0;
    for(var i = 0; i < initials.length; i++) {
        
        if(initials[i] !== "  " && place !== 3) {
            place++;
            
        }
        
    }
    
    key_pressed = false;
};

//Add the highscore to the home screen variables
var add_high_score = function() {
    
    for(var i = 0; i < high_scores.length; i++) {
        
        if(high_scores[i] < score) {
            
            high_scores.splice(i, 0, score);
            high_scores.splice(10, 1);
            score = 0;
            high_score_initials.splice(i, 0, initials_text);
            high_score_initials.splice(10, 1);
            
        }
    }
};

//Add letters to the srting when entering two player names
var add_name_letter = function(name) {
    var added_letter = '';
    
    if(pressed_key === 48) {
        
        added_letter = '0';
        
    }
    if(pressed_key === 49) {
        added_letter = '1';
        
    }
    if(pressed_key === 50) {
        added_letter = '2';
        
    }
    if(pressed_key === 51) {
        added_letter = '3';
        
    }
    if(pressed_key === 52) {
        added_letter = '4';
        
    }
    if(pressed_key === 53) {
        added_letter = '5';
        
    }
    if(pressed_key === 54) {
        added_letter = '6';
        
    }
    if(pressed_key === 55) {
        added_letter = '7';
        
    }
    if(pressed_key === 56) {
        added_letter = '8';
        
    }
    if(pressed_key === 57) {
        added_letter = '9';
        
    }
    if(pressed_key === 65) {
        
        if(shift_held) {
            added_letter = 'A';
            
        } else {
            added_letter = 'a';
            
        }
    }
    if(pressed_key === 66) {
        
        if(shift_held) {
            added_letter = 'B';
            
        } else {
            added_letter = 'b';
            
        }
    }
    if(pressed_key === 67) {
        
        if(shift_held) {
            added_letter = 'C';
            
        } else {
            added_letter = 'c';
            
        }
    }
    if(pressed_key === 68) {
        
        if(shift_held) {
            added_letter = 'D';
            
        } else {
            added_letter = 'd';
            
        }
    }
    if(pressed_key === 69) {
        
        if(shift_held) {
            added_letter = 'E';
            
        } else {
            added_letter = 'e';
            
        }
    }
    if(pressed_key === 70) {
        
        if(shift_held) {
            added_letter = 'F';
            
        } else {
            added_letter = 'f';
            
        }
    }
    if(pressed_key === 71) {
        
        if(shift_held) {
            added_letter = 'G';
            
        } else {
            added_letter = 'g';
            
        }
    }
    if(pressed_key === 72) {
        
        if(shift_held) {
            added_letter = 'H';
            
        } else {
            added_letter = 'h';
            
        }
    }
    if(pressed_key === 73) {
        
        if(shift_held) {
            added_letter = 'I';
            
        } else {
            added_letter = 'i';
            
        }
    }
    if(pressed_key === 74) {
        
        if(shift_held) {
            added_letter = 'J';
            
        } else {
            added_letter = 'j';
            
        }
    }
    if(pressed_key === 75) {
        
        if(shift_held) {
            added_letter = 'K';
            
        } else {
            added_letter = 'k';
            
        }
    }
    if(pressed_key === 76) {
        
        if(shift_held) {
            added_letter = 'L';
            
        } else {
            added_letter = 'l';
            
        }
    }
    if(pressed_key === 77) {
        
        if(shift_held) {
            added_letter = 'M';
            
        } else {
            added_letter = 'm';
            
        }
    }
    if(pressed_key === 78) {
        
        if(shift_held) {
            added_letter = 'N';
            
        } else {
            added_letter = 'n';
            
        }
    }
    if(pressed_key === 79) {
        
        if(shift_held) {
            added_letter = 'O';
            
        } else {
            added_letter = 'o';
            
        }
    }
    if(pressed_key === 80) {
        
        if(shift_held) {
            added_letter = 'P';
            
        } else {
            added_letter = 'p';
            
        }
    }
    if(pressed_key === 81) {
        
        if(shift_held) {
            added_letter = 'Q';
            
        } else {
            added_letter = 'q';
            
        }
    }
    if(pressed_key === 82) {
        
        if(shift_held) {
            added_letter = 'R';
            
        } else {
            added_letter = 'r';
            
        }
    }
    if(pressed_key === 83) {
        
        if(shift_held) {
            added_letter = 'S';
            
        } else {
            added_letter = 's';
            
        }
    }
    if(pressed_key === 84) {
        
        if(shift_held) {
            added_letter = 'T';
            
        } else {
            added_letter = 't';
            
        }
    }
    if(pressed_key === 85) {
        
        if(shift_held) {
            added_letter = 'U';
            
        } else {
            added_letter = 'u';
            
        }
    }
    if(pressed_key === 86) {
        
        if(shift_held) {
            added_letter = 'V';
            
        } else {
            added_letter = 'v';
            
        }
    }
    if(pressed_key === 87) {
        
        if(shift_held) {
            added_letter = 'W';
            
        } else {
            added_letter = 'w';
            
        }
    }
    if(pressed_key === 88) {
        
        if(shift_held) {
            added_letter = 'X';
            
        } else {
            added_letter = 'x';
            
        }
    }
    if(pressed_key === 89) {
        
        if(shift_held) {
            added_letter = 'Y';
            
        } else {
            added_letter = 'y';
            
        }
    }
    if(pressed_key === 90) {
        
        if(shift_held) {
            added_letter = 'Z';
            
        } else {
            added_letter = 'z';
            
        }
    }
    if(pressed_key === 8) {
        backspace = true;
        
        
    }
    if(pressed_key === 10) {
        enter_pressed = true;
        
    }
    
    if(enter_player_one_name) {
        player_one_name_text += added_letter;
        
    } else {
        player_two_name_text += added_letter;
        
    }
    
    key_pressed = false;
};

//Reset the two player snake variables
var reset_two_player_snakes = function() {
    two_player_snake1 = [];
    two_player_snake1.push(new Head(812, player1_colour, true,  "Right"));
    two_player_snake1.push(new BodySegment(811, player1_colour));
    two_player_snake1.push(new BodySegment(810, player1_colour));
    two_player_snake2 = [];
    two_player_snake2.push(new Head(829, player2_colour, true,  "Left"));
    two_player_snake2.push(new BodySegment(830, player2_colour));
    two_player_snake2.push(new BodySegment(831, player2_colour));
    before_start = true;
    two_player_available_positions = [];
    two_player_old_positions = [];
    for(var i = 81; i < 1601; i++) {
        
        if(i !== 812 && i !== 811 && i !== 810 && i !== 829 && i !== 830 && i !== 831) {
            
            two_player_available_positions.push(i);
            
        }
    
    }
    snake_one_add_code = true;
    snake_two_add_code = true;
    snake_two_key_codes = [];
    snake_two_left = true;
    snake_two_up = false;
    snake_two_right = false;
    snake_two_down = false;
    left = false;
    up = false;
    right = true;
    down = false;
    snake_one_old_tail_position = 810;
    snake_two_old_tail_position = 831;
    two_player_random_number = floor(random(81, two_player_available_positions.length + 0.9));
    two_player_food = new BodySegment(two_player_available_positions[two_player_random_number], "Food");
    snake_one_eat = false;
    snake_two_eat = false;
    snake_one_add_length = false;
    snake_two_add_length = false;
    snake_one_crash = false;
    snake_two_crash = false;
    both_crash = false;
    wall_crash = false;
    head_on_top = 0;
    player_one_win = false;
    player_two_win = false;
    tie = false;
    end_delay = -40;
    player_one_key_pressed = false;
    player_two_key_pressed = false;
    
};
}

//Screens
var home_screen = function() {
    number++;
    
    //Base visuals
    background (32, 138, 35);
    textSize(68);
    textAlign(CENTER);
    fill(0, 0, 0);
    text("Snake", 200, 60);
    textSize(12);
    textAlign(LEFT);
    
    //High score board visuals
    fill(69, 79, 84);
    rect(120, 100, 160, 210, 8);
    fill(235, 205, 12);
    textSize(18);
    text("High Scores", 151, 120);
    fill(0, 0, 0);
    
    //Display differently when cheating
    if((cheating || cheating2) && !override_cheat) {
        rect(138, 127, 124, 1.5);
        
    } else {
        rect(130, 127, 140, 1.5);
        
    }
    
    //High score text
    fill(235, 205, 12);
    textSize(12);
    textAlign(CENTER);
    //High Score text
    for(var i = 0; i < 10; i++) {
     
        text("#" + (i + 1), 146, i*18 + 142);
        text(high_score_initials[i], 190, i*18 + 142);
        text(high_scores[i], 241, i*18 + 142);
        
    }
    textAlign(LEFT);
    
    //Draw the home screen buttons
    One_player_button.draw();
    Two_player_button.draw();
    Settings_button.draw();
    Instructions_button.draw();
    
    
    //Add code to queue when it's not already there
    var add_code = true;
    for(var i = 0; i < key_codes.length; i++) {
        
        if(key_codes[i] === pressed_key) {
            add_code = false;
            
        }
    }
    //Do when add code is true
    if(add_code) {
        
        key_codes.push(pressed_key);
        
    }
    
    //Draw the easter food when the snake changes direction
    if(!right) {
        draw_easter_food = true;
        
    }
    if(draw_easter_food && !easter_eat) {
        
        easter_food.draw();
        
    }
    
    //When to update the home snake
    if(millis() >= update_timer + speed && !home_crash && millis() > delay_start + 1000) {
        number = 0;
        
        update_snake(home_snake_segments, 1);
        
    }
    
    //Change the home snake to the player one colour
    if(home_snake_segments[0].colour !== player1_colour && !easter_eat) {
        
        for(var i = 0; i < home_snake_segments.length; i++) {
            
            home_snake_segments[i].colour = player1_colour;
            
        }
    }
    
    //Draw the home snake
    for(var i = home_snake_segments.length - 1; i >= 0; i--) {
        
        home_snake_segments[i].draw();
        
    }
    
    //Check for cheating
    for(var i = 0; i < high_score_initials.length; i++) {
        
        if(high_score_initials[i] !== check_cheating_initials[i]) {
            cheating2 = true;
            
        }
    }
    
    //Display easter colours when food eaten
    if(home_snake_segments[0].position === 673) {
        easter_eat = true;
        
    }
    if(easter_eat) {
        
        for(var i = 0; i < home_snake_segments.length; i++) {
            home_snake_segments[i].colour = "Easter";
            
        }
    }
    
    //Check if the home snake crashes
    for(var i = 1; i < home_snake_segments.length; i++) {
        
        if(home_snake_segments[0].position === home_snake_segments[i].position) {
            home_crash = true;
            eyes = false;
            
        }
    }
    if(home_crash) {
        
        home_snake_segments[0].draw_eyes = false;
        type_home_crash_message();
        
    }
    
    //button operation
    if(one_player_pressed) {
        one_player_pressed = false;
        one_player = true;
        
        reset_one_player_snake();
        
    }
    if(two_player_pressed) {
        two_player_pressed = false;
        two_player = true;
        
        reset_two_player_snakes();
        
    }
    
    //Check for cheating
    if(high_score_initials[0] !== "MEK") {
        cheating = true;
        
    }
    if(high_score_initials[1] !== "ZOW") {
        cheating = true;
        
    }
    if(high_score_initials[2] !== "JOE") {
        cheating = true;
        
    }
    if(high_score_initials[3] !== "AMK") {
        cheating = true;
        
    }
    if(high_score_initials[4] !== "AMK") {
        cheating = true;
        
    }
    if(high_score_initials[5] !== "AMK") {
        cheating = true;
        
    }
    if(high_score_initials[6] !== "AMK") {
        cheating = true;
        
    }
    if(high_score_initials[7] !== "AMK") {
        cheating = true;
        
    }
    if(high_score_initials[8] !== "AMK") {
        cheating = true;
        
    }
    if(high_score_initials[9] !== "AMK") {
        cheating = true;
        
    }
    
    //Make white screen when cheating
    for(var i = 0; i < high_score_initials.length; i++) {
        
        if(high_score_initials[i].length !== 3 && !override_cheat) {
            cheating = true;
            fill(255, 255, 255);
            rect(0, 0, 400, 400);
            
        }
    }
};

var settings_screen = function() {
    background(140, 140, 140);
    //Settings base visuals
    textSize(55);
    fill(0, 0, 0);
    text("Settings", 99, 50);
    
    //Button labels
    textSize(25);
    text("Difficulty", 53, 112);
    text("Wall Collisions", 219.5, 112);
    text("Player 1 Colour", 13.5, 250);
    text("Player 2 Colour", 213.5, 250);
    
    //Draw buttons
    difficulty_easy.draw();
    difficulty_normal.draw();
    difficulty_hard.draw();
    wall_collisions_on.draw();
    wall_collisions_off.draw();
    player1_red.draw();
    player1_orange.draw();
    player1_yellow.draw();
    player1_green.draw();
    player1_blue.draw();
    player1_purple.draw();
    player1_black.draw();
    player1_white.draw();
    player2_red.draw();
    player2_orange.draw();
    player2_yellow.draw();
    player2_green.draw();
    player2_blue.draw();
    player2_purple.draw();
    player2_black.draw();
    player2_white.draw();
    
    back_button.draw();
    
    //Back arrow
    strokeWeight(4);
    if(over_back) {
        
        stroke(70, 70, 70);
        
    } else {
        
        stroke(0, 0, 0);
        
    }
    line(20, 18, 10, 30);
    line(20, 42, 10, 30);
    line(40, 30, 11, 30);
    noStroke();
    
    //Difficulty indicator
    if(difficulty === "Easy") {
        speed = 250;
        
        if(difficulty_indicator_x >= 38) {
            
            if(difficulty_indicator_x < 58) {
                difficulty_indicator_speed = -sqrt(difficulty_indicator_x - 38);
                
            } else if(difficulty_indicator_speed > -10) {
                difficulty_indicator_speed -= 5;
                
            } else {
                difficulty_indicator_speed = -10;
                
            }
            
        } else {
            difficulty_indicator_speed = 0;
            
        }
        
    } else if(difficulty === "Normal") {
        speed = 175;
        
        //Need small gap in the middle for indicator to stop changing value
        if(difficulty_indicator_x < 99) {
            
            if(difficulty_indicator_x > 78) {
                difficulty_indicator_speed = sqrt(99 - difficulty_indicator_x);
                
            } else if(difficulty_indicator_speed < 10) {
                difficulty_indicator_speed += 5;
                
            } else {
                difficulty_indicator_speed = 10;
                
            }
            
        } else if(difficulty_indicator_x > 100) {
            
            if(difficulty_indicator_x < 119) {
                difficulty_indicator_speed = -sqrt(difficulty_indicator_x - 99);
                
            } else if(difficulty_indicator_speed < -10) {
                difficulty_indicator_speed -= 5;
                
            } else {
                difficulty_indicator_speed = -10;
                
            }
            
        } else {
            difficulty_indicator_speed = 0;
            
        }
        
    } else if(difficulty === "Hard") {
        speed = 100;
        
        if(difficulty_indicator_x <= 160) {
            
            if(difficulty_indicator_x > 140) {
                difficulty_indicator_speed = sqrt(160 - difficulty_indicator_x);
                
            } else if(difficulty_indicator_speed < 10) {
                difficulty_indicator_speed += 5;
                
            } else {
                difficulty_indicator_speed = 10;
                
            }
            
        } else {
            difficulty_indicator_speed = 0;
            
        }
        
    }
    difficulty_indicator_x += difficulty_indicator_speed;
    
    fill(0, 0, 0);
    triangle(difficulty_indicator_x, 160, difficulty_indicator_x - 15, 180, difficulty_indicator_x + 15, 180);
    
    //Wall collisions indicator
    if(wall_collisions) {
        
        if(wall_collisions_indicator_x >= 269) {
            
            if(wall_collisions_indicator_x < 289) {
                wall_collisions_indicator_speed = -sqrt(wall_collisions_indicator_x - 269);
                
            } else if(wall_collisions_indicator_speed > -10) {
                wall_collisions_indicator_speed -= 5;
                
            } else {
                wall_collisions_indicator_speed = -10;
                
            }
            
        } else {
            wall_collisions_indicator_speed = 0;
            
        }
    } else {
        
        if(wall_collisions_indicator_x <= 331) {
            
            if(wall_collisions_indicator_x > 311) {
                wall_collisions_indicator_speed = sqrt(331 - wall_collisions_indicator_x);
                
            } else if(wall_collisions_indicator_speed < 10) {
                wall_collisions_indicator_speed += 5;
                
            } else {
                wall_collisions_indicator_speed = 10;
                
            }
            
        } else {
            wall_collisions_indicator_speed = 0;
            
        }
    }
    wall_collisions_indicator_x +=wall_collisions_indicator_speed;
    
    triangle(wall_collisions_indicator_x, 160, wall_collisions_indicator_x - 15, 180, wall_collisions_indicator_x + 15, 180);
    
    //Player1 colours
    //Jump between colours and shades
    if(player1_colour_indicator_y !== 362 && (player1_colour === "Black" || player1_colour === "White")) {
        player1_colour_indicator_y = 362;
        
        if(player1_colour === "Black") {
            player1_colour_indicator_x = 84;
            
        }
        if(player1_colour === "White") {
            player1_colour_indicator_x = 116;
            
        }
        
    } else if(player1_colour_indicator_y !== 298 && player1_colour !== "Black" && player1_colour !== "White" ) {
        player1_colour_indicator_y = 298;
        
        if(player1_colour === "Red") {
            player1_colour_indicator_x = 20;
            
        }
        if(player1_colour === "Orange") {
            player1_colour_indicator_x = 52;
            
        }
        if(player1_colour === "Yellow") {
            player1_colour_indicator_x = 84;
            
        }
        if(player1_colour === "Green") {
            player1_colour_indicator_x = 116;
            
        }
        if(player1_colour === "Blue") {
            player1_colour_indicator_x = 148;
            
        }
        if(player1_colour === "Purple") {
            player1_colour_indicator_x = 180;
            
        }
    }
    
    if(player1_colour_indicator_y === 362) {
        
        if(player1_colour === "Black") {
            
            if(player1_colour_indicator_x >= 84) {
                
                if(player1_colour_indicator_x < 99) {
                    player1_colour_indicator_speed = -sqrt(player1_colour_indicator_x - 84);
                    
                } else if(player1_colour_indicator_speed > -10) {
                    player1_colour_indicator_speed -= 5;
                    
                } else {
                    player1_colour_indicator_speed = -10;
                    
                }
                
            } else {
                player1_colour_indicator_speed = 0;
                
            }
            
        } else if(player1_colour === "White") {
            
            if(player1_colour_indicator_x <= 116) {
                
                if(player1_colour_indicator_x > 101) {
                    player1_colour_indicator_speed = sqrt(116 - player1_colour_indicator_x);
                    
                } else if(player1_colour_indicator_speed < 10) {
                    player1_colour_indicator_speed += 5;
                    
                } else {
                    player1_colour_indicator_speed = 10;
                    
                }
                
            } else {
                player1_colour_indicator_speed = 0;
                
            }
        }
        
    } else {
        
        if(player1_colour === "Red") {
            
            if(player1_colour_indicator_x >= 20) {
                
                if(player1_colour_indicator_x < 35) {
                    player1_colour_indicator_speed = -sqrt(player1_colour_indicator_x - 20);
                    
                } else if(player1_colour_indicator_speed > -10) {
                    player1_colour_indicator_speed -= 5;
                    
                } else {
                    player1_colour_indicator_speed = -10;
                    
                }
                
            } else {
                player1_colour_indicator_speed = 0;
                
            }
        } else if(player1_colour === "Orange") {
            
            if(player1_colour_indicator_x >= 52) {
                
                if(player1_colour_indicator_x < 67) {
                    player1_colour_indicator_speed = -sqrt(player1_colour_indicator_x - 52);
                    
                } else if(player1_colour_indicator_speed > -10) {
                    player1_colour_indicator_speed -= 5;
                    
                } else {
                    player1_colour_indicator_speed = -10;
                    
                }
                
            } else if(player1_colour_indicator_x <= 51) {
                
                if(player1_colour_indicator_x > 37) {
                    player1_colour_indicator_speed = sqrt(52 - player1_colour_indicator_x);
                    
                } else if(player1_colour_indicator_speed < 10) {
                    player1_colour_indicator_speed += 5;
                    
                } else {
                    player1_colour_indicator_speed = 10;
                    
                }
            } else {
                player1_colour_indicator_speed = 0;
                
            }
        } else if(player1_colour === "Yellow") {
            
            if(player1_colour_indicator_x >= 84) {
                
                if(player1_colour_indicator_x < 99) {
                    player1_colour_indicator_speed = -sqrt(player1_colour_indicator_x - 84);
                    
                } else if(player1_colour_indicator_speed > -10) {
                    player1_colour_indicator_speed -= 5;
                    
                } else {
                    player1_colour_indicator_speed = -10;
                    
                }
                
            } else if(player1_colour_indicator_x <= 83) {
                
                if(player1_colour_indicator_x > 69) {
                    player1_colour_indicator_speed = sqrt(84 - player1_colour_indicator_x);
                    
                } else if(player1_colour_indicator_speed < 10) {
                    player1_colour_indicator_speed += 5;
                    
                } else {
                    player1_colour_indicator_speed = 10;
                    
                }
            } else {
                player1_colour_indicator_speed = 0;
                
            }
        } else if(player1_colour === "Green") {
            
            if(player1_colour_indicator_x >= 116) {
                
                if(player1_colour_indicator_x < 131) {
                    player1_colour_indicator_speed = -sqrt(player1_colour_indicator_x - 116);
                    
                } else if(player1_colour_indicator_speed > -10) {
                    player1_colour_indicator_speed -= 5;
                    
                } else {
                    player1_colour_indicator_speed = -10;
                    
                }
                
            } else if(player1_colour_indicator_x <= 115) {
                
                if(player1_colour_indicator_x > 101) {
                    player1_colour_indicator_speed = sqrt(116 - player1_colour_indicator_x);
                    
                } else if(player1_colour_indicator_speed < 10) {
                    player1_colour_indicator_speed += 5;
                    
                } else {
                    player1_colour_indicator_speed = 10;
                    
                }
            } else {
                player1_colour_indicator_speed = 0;
                
            }
        }  else if(player1_colour === "Blue") {
            
            if(player1_colour_indicator_x >= 148) {
                
                if(player1_colour_indicator_x < 163) {
                    player1_colour_indicator_speed = -sqrt(player1_colour_indicator_x - 148);
                    
                } else if(player1_colour_indicator_speed > -10) {
                    player1_colour_indicator_speed -= 5;
                    
                } else {
                    player1_colour_indicator_speed = -10;
                    
                }
                
            } else if(player1_colour_indicator_x <= 147) {
                
                if(player1_colour_indicator_x > 133) {
                    player1_colour_indicator_speed = sqrt(148 - player1_colour_indicator_x);
                    
                } else if(player1_colour_indicator_speed < 10) {
                    player1_colour_indicator_speed += 5;
                    
                } else {
                    player1_colour_indicator_speed = 10;
                    
                }
            } else {
                player1_colour_indicator_speed = 0;
                
            }
        } else if(player1_colour === "Purple") {
            
            if(player1_colour_indicator_x <= 180) {
                
                if(player1_colour_indicator_x > 165) {
                    player1_colour_indicator_speed = sqrt(180 - player1_colour_indicator_x);
                    
                } else if(player1_colour_indicator_speed < 10) {
                    player1_colour_indicator_speed += 5;
                    
                } else {
                    player1_colour_indicator_speed = 10;
                    
                }
                
            } else {
                player1_colour_indicator_speed = 0;
                
            }
        }
    }
    player1_colour_indicator_x += player1_colour_indicator_speed;
    
    triangle(player1_colour_indicator_x, player1_colour_indicator_y, player1_colour_indicator_x - 15, player1_colour_indicator_y + 20, player1_colour_indicator_x + 15, player1_colour_indicator_y + 20);
    
    //Player2 colours
    //Jump between colours and shades
    if(player2_colour_indicator_y !== 362 && (player2_colour === "Black" || player2_colour === "White")) {
        player2_colour_indicator_y = 362;
        
        if(player2_colour === "Black") {
            player2_colour_indicator_x = 284;
            
        }
        if(player2_colour === "White") {
            player2_colour_indicator_x = 316;
            
        }
        
    } else if(player2_colour_indicator_y !== 298 && player2_colour !== "Black" && player2_colour !== "White" ) {
        player2_colour_indicator_y = 298;
        
        if(player2_colour === "Red") {
            player2_colour_indicator_x = 220;
            
        }
        if(player2_colour === "Orange") {
            player2_colour_indicator_x = 252;
            
        }
        if(player2_colour === "Yellow") {
            player2_colour_indicator_x = 284;
            
        }
        if(player2_colour === "Green") {
            player2_colour_indicator_x = 316;
            
        }
        if(player2_colour === "Blue") {
            player2_colour_indicator_x = 348;
            
        }
        if(player2_colour === "Purple") {
            player2_colour_indicator_x = 380;
            
        }
    }
    
    if(player2_colour_indicator_y === 362) {
        
        if(player2_colour === "Black") {
            
            if(player2_colour_indicator_x >= 284) {
                
                if(player2_colour_indicator_x < 299) {
                    player2_colour_indicator_speed = -sqrt(player2_colour_indicator_x - 284);
                    
                } else if(player2_colour_indicator_speed > -10) {
                    player2_colour_indicator_speed -= 5;
                    
                } else {
                    player2_colour_indicator_speed = -10;
                    
                }
                
            } else {
                player2_colour_indicator_speed = 0;
                
            }
            
        } else if(player2_colour === "White") {
            
            if(player2_colour_indicator_x <= 316) {
                
                if(player2_colour_indicator_x > 301) {
                    player2_colour_indicator_speed = sqrt(316 - player2_colour_indicator_x);
                    
                } else if(player2_colour_indicator_speed < 10) {
                    player2_colour_indicator_speed += 5;
                    
                } else {
                    player2_colour_indicator_speed = 10;
                    
                }
                
            } else {
                player2_colour_indicator_speed = 0;
                
            }
        }
        
    } else {
        
        if(player2_colour === "Red") {
            
            if(player2_colour_indicator_x >= 220) {
                
                if(player2_colour_indicator_x < 235) {
                    player2_colour_indicator_speed = -sqrt(player2_colour_indicator_x - 220);
                    
                } else if(player2_colour_indicator_speed > -10) {
                    player2_colour_indicator_speed -= 5;
                    
                } else {
                    player2_colour_indicator_speed = -10;
                    
                }
                
            } else {
                player2_colour_indicator_speed = 0;
                
            }
        } else if(player2_colour === "Orange") {
            
            if(player2_colour_indicator_x >= 252) {
                
                if(player2_colour_indicator_x < 267) {
                    player2_colour_indicator_speed = -sqrt(player2_colour_indicator_x - 252);
                    
                } else if(player2_colour_indicator_speed > -10) {
                    player2_colour_indicator_speed -= 5;
                    
                } else {
                    player2_colour_indicator_speed = -10;
                    
                }
                
            } else if(player2_colour_indicator_x <= 251) {
                
                if(player2_colour_indicator_x > 237) {
                    player2_colour_indicator_speed = sqrt(252 - player2_colour_indicator_x);
                    
                } else if(player2_colour_indicator_speed < 10) {
                    player2_colour_indicator_speed += 5;
                    
                } else {
                    player2_colour_indicator_speed = 10;
                    
                }
            } else {
                player2_colour_indicator_speed = 0;
                
            }
        } else if(player2_colour === "Yellow") {
            
            if(player2_colour_indicator_x >= 284) {
                
                if(player2_colour_indicator_x < 299) {
                    player2_colour_indicator_speed = -sqrt(player2_colour_indicator_x - 284);
                    
                } else if(player2_colour_indicator_speed > -10) {
                    player2_colour_indicator_speed -= 5;
                    
                } else {
                    player2_colour_indicator_speed = -10;
                    
                }
                
            } else if(player2_colour_indicator_x <= 283) {
                
                if(player2_colour_indicator_x > 269) {
                    player2_colour_indicator_speed = sqrt(284 - player2_colour_indicator_x);
                    
                } else if(player2_colour_indicator_speed < 10) {
                    player2_colour_indicator_speed += 5;
                    
                } else {
                    player2_colour_indicator_speed = 10;
                    
                }
            } else {
                player2_colour_indicator_speed = 0;
                
            }
        } else if(player2_colour === "Green") {
            
            if(player2_colour_indicator_x >= 316) {
                
                if(player2_colour_indicator_x < 331) {
                    player2_colour_indicator_speed = -sqrt(player2_colour_indicator_x - 316);
                    
                } else if(player2_colour_indicator_speed > -10) {
                    player2_colour_indicator_speed -= 5;
                    
                } else {
                    player2_colour_indicator_speed = -10;
                    
                }
                
            } else if(player2_colour_indicator_x <= 315) {
                
                if(player2_colour_indicator_x > 301) {
                    player2_colour_indicator_speed = sqrt(316 - player2_colour_indicator_x);
                    
                } else if(player2_colour_indicator_speed < 10) {
                    player2_colour_indicator_speed += 5;
                    
                } else {
                    player2_colour_indicator_speed = 10;
                    
                }
            } else {
                player2_colour_indicator_speed = 0;
                
            }
        }  else if(player2_colour === "Blue") {
            
            if(player2_colour_indicator_x >= 348) {
                
                if(player2_colour_indicator_x < 363) {
                    player2_colour_indicator_speed = -sqrt(player2_colour_indicator_x - 348);
                    
                } else if(player2_colour_indicator_speed > -10) {
                    player2_colour_indicator_speed -= 5;
                    
                } else {
                    player2_colour_indicator_speed = -10;
                    
                }
                
            } else if(player2_colour_indicator_x <= 347) {
                
                if(player2_colour_indicator_x > 333) {
                    player2_colour_indicator_speed = sqrt(348 - player2_colour_indicator_x);
                    
                } else if(player2_colour_indicator_speed < 10) {
                    player2_colour_indicator_speed += 5;
                    
                } else {
                    player2_colour_indicator_speed = 10;
                    
                }
            } else {
                player2_colour_indicator_speed = 0;
                
            }
        } else if(player2_colour === "Purple") {
            
            if(player2_colour_indicator_x <= 380) {
                
                if(player2_colour_indicator_x > 365) {
                    player2_colour_indicator_speed = sqrt(380 - player2_colour_indicator_x);
                    
                } else if(player2_colour_indicator_speed < 10) {
                    player2_colour_indicator_speed += 5;
                    
                } else {
                    player2_colour_indicator_speed = 10;
                    
                }
                
            } else {
                player2_colour_indicator_speed = 0;
                
            }
        }
    }
    player2_colour_indicator_x += player2_colour_indicator_speed;
    
    triangle(player2_colour_indicator_x, player2_colour_indicator_y, player2_colour_indicator_x - 15, player2_colour_indicator_y + 20, player2_colour_indicator_x + 15, player2_colour_indicator_y + 20);
    
};

var one_player_screen = function() {
    background (32, 138, 35);
    
    //game_grid(); // 40 by 38 spaces
    
    //Base one player visuals
    fill(0, 0, 0);
    rect(0, 0, 400, 20);
    fill(235, 205, 12);
    textSize(12);
    text("Score: " + score, 5, 14);
    if(high_scores[0] > 0) {
        
        textAlign(RIGHT);
        text("Highest Score: " + high_scores[0], 395, 14);
        textAlign(LEFT);
        
    }
    
    //Do when paused
    if(paused) {
        update_timer = millis();
        fill(255, 255, 255);
        textAlign(CENTER);
        text("PAUSED", 200, 15);
        textAlign(LEFT);
        
    }
    
    //Check for a perfect game
    if(one_player_snake.size === 1520) {
        perfect_game = true;
        player1_snake_stopped = true;
        game_over = true;
        
    }
    
    //Update available positions
    old_positions = available_positions;
    available_positions = [];
    for(var i = 0; i < old_positions.length; i++) {
        
        if(old_positions[i] !== one_player_snake[0].position) {
            
            available_positions.push(old_positions[i]);
            
        } else {
            covered_positions.push(old_positions[i]);
            
        }
        
    }
    
    //Add code to queue when it's not already there
    add_code = true;
    for(var i = 0; i < key_codes.length; i++) {
        
        if(key_codes[i] === pressed_key) {
            add_code = false;
            
        }
    }
    if(add_code) {
        
        key_codes.push(pressed_key);
        
    }
    
    //Start snake when a key pressed
    if(player1_snake_stopped && (pressed_key === 38 || pressed_key === 39 || pressed_key === 40 || pressed_key === 87 || pressed_key === 68 || pressed_key === 83) && !one_player_crash) {
        player1_snake_stopped = false;
        update_timer = millis();
        key_codes.shift();
        key_codes.shift();
        
    }
    
    //Update snake position
    if(millis() >= update_timer + speed && !player1_snake_stopped && !one_player_crash) {
        number = 0;
        
        update_snake(one_player_snake, 3);
        
        if(add_length) {
            add_length = false;
            one_player_snake.push(new BodySegment(old_tail_position, player1_colour));
            
        } else {
            
            available_positions.push(covered_positions[0]);
            covered_positions.shift();
            
        }
        
    }
    
    if(one_player_snake[0].colour !== player1_colour) {
        
        for(var i = 0; i < one_player_snake.length; i++) {
            
            one_player_snake[i].colour = player1_colour;
            
        }
    }
    
    
    //See available food spaces
    /*
    for(var i = 0; i < available_positions.length; i++) {
        var x_position = ((available_positions[i] - 1) % 40) * 10 + 5;
        var y_position = Math.ceil(available_positions[i] / 40 - 1) * 10 + 5;
      
        fill(110, 86, 14);
      
        ellipse (x_position, y_position , 10, 10);
        
    }
    */
    
    //Draw the one player snake and check for crashing into itself
    for(var i = one_player_snake.length - 1; i >= 0; i--) {
        
        if(i !== 0 && one_player_snake[i].position === one_player_snake[0].position) {
            one_player_crash = true;
            player1_snake_stopped = true;
            
        }
        
        one_player_snake[i].draw();
        
    }
    
    //Set crash to true if the snake crashes into the wall when wall collisions are on
    if(wall_collisions && ((one_player_snake[0].position % 40 === 1) && key_codes[0] === 37 || (one_player_snake[0].position % 40 === 0) && key_codes[0] === 39 || (Math.ceil(one_player_snake[0].position / 40) === 3) && key_codes[0] === 38 || (Math.ceil(one_player_snake[0].position / 40) === 40) && key_codes[0] === 40)) {
        one_player_crash = true;
        
    }
    
    //Eating
    if(one_player_snake[0].position === food.position) {
        random_number = floor(random(81, available_positions.length + 0.9));
        eat = true;
        
    }
    if(eat) {
        eat = false;
        add_length = true;
        food.position = available_positions[random_number];
        old_tail_position = one_player_snake[one_player_snake.length - 1].position;
        
        if(difficulty === "Easy") {
            score += 6;
            
        } else if(difficulty === "Normal") {
            score += 10;
            
        } else {
            score += 14;
            
        }
        
    }
    
    food.draw();
    
    //Do when the snake crashes
    if(one_player_crash) {
        fill(255, 255, 255);
        one_player_snake[0].draw_eyes = false;
        game_over = true;
        
        if(wall_collisions && pressed_key === 39) {
            one_player_snake[0].side = "Right";
            rotation = 0;
            
        }
        if(wall_collisions && pressed_key === 37) {
            one_player_snake[0].side = "Left";
            rotation = 0;
            
        }
        if(wall_collisions && pressed_key === 38) {
            
            if(right) {
                rotation = -90;
                
            } else {
                rotation = 90;
                
            }
            
            
        }
        if(wall_collisions && pressed_key === 40) {
            
            if(right) {
                rotation = 90;
                
            } else {
                rotation = -90;
                
            }
            
            
        }
        
    }
    
};

var two_player_screen = function() {
    background (32, 138, 35);
    
    //game_grid(); // 40 by 38 spaces
    
    //Two player screen base visuals
    fill(0, 0, 0);
    rect(0, 0, 400, 20);
    fill(235, 205, 12);
    textSize(12);
    textAlign(LEFT);
    text(player_one_name + "'s Length: " + two_player_snake1.length, 5, 15);
    textAlign(RIGHT);
    text(player_two_name + "'s Length: " + two_player_snake2.length, 395, 15);
    textAlign(CENTER);
    
    //Display enter names screen when starting if names aren't entered, otherwise take key entry
    if(!names_entered) {
        names_entered = true;
        enter_names = true;
        
    } else {
        
        if(before_start) {
            update_timer = millis();
            
            fill(115, 115, 115, 180);
            rect(50, 60, 300, 62, 15);
            
            fill(0, 0, 0);
            textSize(30);
            text("Press space to start", 200, 100);
            
            if(pressed_key === 32) {
                before_start = false;
                paused = false;
                
            }
        }
    }
    
    //Do when paused
    if(paused) {
        update_timer = millis();
        fill(255, 255, 255);
        textAlign(CENTER);
        text("PAUSED", 200, 15);
        textAlign(LEFT);
        
    }
    
    //Update available food positions
    two_player_old_positions = two_player_available_positions;
    two_player_available_positions = [];
    for(var i = 0; i < two_player_old_positions.length; i++) {
        
        if(two_player_old_positions[i] !== two_player_snake1[0].position && two_player_old_positions[i] !== two_player_snake2[0].position) {
            
            two_player_available_positions.push(two_player_old_positions[i]);
            
        }
        
    }
    
    //If the key code isn't in the queue add it
    snake_one_add_code = true;
    snake_two_add_code = true;
    for(var i = 0; i < key_codes.length; i++) {
        
        if(key_codes[i] === pressed_key) {
            snake_one_add_code = false;
            
        }
    }
    for(var i = 0; i < snake_two_key_codes.length; i++) {
        
        if(snake_two_key_codes[i] === pressed_key) {
            snake_two_add_code = false;
            
        }
    }
    if(!before_start && snake_one_add_code && (pressed_key === 65 || pressed_key === 87 || pressed_key === 68 || pressed_key === 83)) {
        
        key_codes.push(pressed_key);
        
    }
    if(!before_start && snake_two_add_code && (pressed_key === 37 || pressed_key === 38 || pressed_key === 39 || pressed_key === 40)) {
        
        snake_two_key_codes.push(pressed_key);
        
    }
    
    //Update snake position
    if(millis() >= update_timer + speed) {
        if(!player_one_key_pressed) {
            key_codes.push(68);
            
        }
        if(!player_two_key_pressed) {
            snake_two_key_codes.push(37);
            
        }
    
        snake_one_old_tail_position = two_player_snake1[two_player_snake1.length - 1].position;
        snake_two_old_tail_position = two_player_snake2[two_player_snake2.length - 1].position;
        
        if(!snake_one_crash  && !both_crash) {
            update_snake(two_player_snake1, 3);
            
        }
        if(!snake_two_crash  && !both_crash){
            update_snake(two_player_snake2, 3);
            
        }
        
        if(snake_one_add_length) {
            snake_one_add_length = false;
            two_player_snake1.push(new BodySegment(snake_one_old_tail_position, player1_colour));
            
        } else {
            
            two_player_available_positions.push(snake_one_old_tail_position);
            
        }
        if(snake_two_add_length) {
            snake_two_add_length = false;
            two_player_snake2.push(new BodySegment(snake_two_old_tail_position, player2_colour));
            
        } else {
            
            two_player_available_positions.push(snake_two_old_tail_position);
            
        }
        
    }
    
    //Crash when both heads collide
    if(two_player_snake1[0].position === two_player_snake2[0].position) {
        both_crash = true;
        game_over = true;
        two_player_snake1[0].draw_eyes = false;
        two_player_snake2[0].draw_eyes = false;
        
        if(two_player_snake1.length > two_player_snake2.length) {
            head_on_top = 1;
            player_one_win = true;
            
        } else if(two_player_snake2.length > two_player_snake1.length) {
            head_on_top = 2;
            player_two_win = true;
            
        } else {
            
            if(head_on_top ===0) {
                tie = true;
                head_on_top = round(random(1, 2));
                
            }
        }
    }
    
    //Crash when eather snake runs into itself or the other one
    for(var i = two_player_snake1.length - 1; i > 0; i--) {
        
        if(two_player_snake1[i].position === two_player_snake1[0].position) {
            game_over = true;
            player_two_win = true;
            snake_one_crash = true;
            two_player_snake1[0].draw_eyes = false;
            
        }
        
        if(two_player_snake2[0].position === two_player_snake1[i].position) {
            game_over = true;
            both_crash = true;
            player_one_win = true;
            two_player_snake2[0].draw_eyes = false;
            
        }
        
        two_player_snake1[i].draw();
        
    }
    for(var i = two_player_snake2.length - 1; i > 0; i--) {
        
        if(two_player_snake2[i].position === two_player_snake2[0].position) {
            game_over = true;
            player_one_win = true;
            snake_two_crash = true;
            two_player_snake2[0].draw_eyes = false;
            
        }
        
        if(two_player_snake1[0].position === two_player_snake2[i].position) {
            game_over = true;
            player_two_win = true;
            both_crash = true;
            two_player_snake1[0].draw_eyes = false;
            
        }
        
        drawing_second_head = true;
        
        two_player_snake2[i].draw();
        
        drawing_second_head = false;
        
    }
    
    //Which head to draw on top
    if(head_on_top === 2) {
        two_player_snake1[0].draw();
        drawing_second_head = true;
        two_player_snake2[0].draw();
        drawing_second_head = false;
        
    } else {
        drawing_second_head = true;
        two_player_snake2[0].draw();
        drawing_second_head = false;
        two_player_snake1[0].draw();
            
    }
    
    
    //Wall crashing
    if(wall_collisions && ((two_player_snake1[0].position % 40 === 1) && key_codes[0] === 65 || (two_player_snake1[0].position % 40 === 0) && key_codes[0] === 68 || (Math.ceil(two_player_snake1[0].position / 40) === 3) && key_codes[0] === 87 || (Math.ceil(two_player_snake1[0].position / 40) === 40) && key_codes[0] === 83)) {
        game_over = true;
        player_two_win = true;
        snake_one_crash = true;
        two_player_snake1[0].draw_eyes = false;
        wall_crash = true;
        
    }
    //Not sure why I need extra !player_two_key_pressed check here
    if(wall_collisions && ((two_player_snake2[0].position % 40 === 1) && (snake_two_key_codes[0] === 37 || !player_two_key_pressed) || (two_player_snake2[0].position % 40 === 0) && snake_two_key_codes[0] === 39 || (Math.ceil(two_player_snake2[0].position / 40) === 3) && snake_two_key_codes[0] === 38 || (Math.ceil(two_player_snake2[0].position / 40) === 40) && snake_two_key_codes[0] === 40)) {
        game_over = true;
        player_one_win = true;
        snake_two_crash = true;
        two_player_snake2[0].draw_eyes = false;
        wall_crash = true;
        
    }
    
    //Rotate head correctly when crashed into wall
    if(wall_crash && snake_one_crash) {
        
        if(pressed_key === 68) {
            two_player_snake1[0].side = "Right";
            rotation = 0;
            
        }
        if(pressed_key === 65) {
            two_player_snake1[0].side = "Left";
            rotation = 0;
            
        }
        if(pressed_key === 87) {
            
            if(right) {
                rotation = -90;
                
            } else if(left) {
                rotation = 90;
                
            }
            
        }
        if(pressed_key === 83) {
            
            if(right) {
                rotation = 90;
                
            } else if(left) {
                rotation = -90;
                
            }
            
        }
        
    }
    if(wall_crash && snake_two_crash) {
        
        if(pressed_key === 39) {
            two_player_snake2[0].side = "Right";
            P2_rotation = 0;
            
        }
        if(pressed_key === 37) {
            two_player_snake2[0].side = "Left";
            P2_rotation = 0;
            
        }
        if(pressed_key === 38) {
            
            if(snake_two_right) {
                P2_rotation = -90;
                
            } else if(snake_two_left) {
                P2_rotation = 90;
                
            }
            
        }
        if(pressed_key === 40) {
            
            if(snake_two_right) {
                P2_rotation = 90;
                
            } else if(snake_two_left) {
                P2_rotation = -90;
                
            }
            
        }
        
    }
    
    //Find who wins when both snakes crash
    if(player_one_win && player_two_win) {
        
        if(two_player_snake1.length > two_player_snake2.length) {
            player_one_win = true;
            player_two_win = false;
            tie = false;
            
        } else if (two_player_snake2.length > two_player_snake1.length) {
            player_one_win = false;
            player_two_win = true;
            tie = false;
            
        } else {
            player_one_win = false;
            player_two_win = false;
            tie = true;
            
        }

    }
    
    //Eating
    if(two_player_snake1[0].position === two_player_food.position) {
        two_player_random_number = floor(random(81, two_player_available_positions.length + 0.9));
        snake_one_eat = true;
        
    }
    if(two_player_snake2[0].position === two_player_food.position) {
        two_player_random_number = floor(random(81, two_player_available_positions.length + 0.9));
        snake_two_eat = true;
        
    }
    if(snake_one_eat) {
        snake_one_eat = false;
        snake_one_add_length = true;
        two_player_food.position = two_player_available_positions[two_player_random_number];
        
    }
    if(snake_two_eat) {
        snake_two_eat = false;
        snake_two_add_length = true;
        two_player_food.position = two_player_available_positions[two_player_random_number];
        
    }
    
    //Don't draw the food before the game starts
    if(!before_start) {
        
        two_player_food.draw();
        
    }
    
    textAlign(LEFT);
};

var enter_names_screen = function() {
    var cursor_time = millis();
    
    //Enter names screen base visuals
    fill(85, 85, 85, 200);
    rect(0, 0, 400, 400);
    fill(180, 180, 180);
    rect(50, 80, 300, 240, 20);
    fill(0, 0, 0);
    textAlign(CENTER);
    textSize(30);
    text("Enter your names", 200, 115);
    
    textSize(20);
    text("Player one", 200, 155);
    text("Player two", 200, 228);
    
    textAlign(LEFT);
    
    //Clicked on button is false when mouse released
    if(mouse_released) {
        enter_pressed = false;
        enter_player_one_name = false;
        enter_player_two_name = false;
        
    }
    
    //Draw enter names buttons
    player_one_name_button.draw();
    player_two_name_button.draw();
    continue_button.draw();
    
    //Add letters to names when keys pressed
    if(key_pressed) {
        
        if(enter_player_one_name && (player_one_name_text.length < 15 || pressed_key === 8)) {
            add_name_letter(player_one_name_text);
            
        }
        if(enter_player_two_name && (player_two_name_text.length < 15 || pressed_key === 8)) {
            
            add_name_letter(player_two_name_text);
            
        }
        
    }
    
    //How to backspace
    if(backspace) {
        backspace = false;
        
        if(enter_player_one_name) {
            old_name = player_one_name_text;
            player_one_name_text = "";
            
            for(var i = 0; i < old_name.length - 1; i++) {
                player_one_name_text += old_name[i];
                
            }
            
        } else if (enter_player_two_name) {
            old_name = player_two_name_text;
            player_two_name_text = "";
            
            for(var i = 0; i < old_name.length - 1; i++) {
                player_two_name_text += old_name[i];
                
            }
            
        }
    }
    
    //Figure out where cursor should be
    player_one_Is = 0;
    player_one_capitals = 0;
    for(var i = 0; i < player_one_name_text.length; i++) {
        
        if(player_one_name_text[i] === player_one_name_text[i].toUpperCase()) {
            player_one_capitals++;
            
        }
        
        if(player_one_name_text[i] === "I") {
            player_one_Is++;
            
        }
        
    }
    player_two_Is = 0;
    player_two_capitals = 0;
    for(var i = 0; i < player_two_name_text.length; i++) {
        
        if(player_two_name_text[i] === player_two_name_text[i].toUpperCase()) {
            player_two_capitals++;
            
        }
        
        if(player_two_name_text[i] === "I") {
            player_two_Is++;
            
        }
        
    }
    
    //Flash cursors
    if(enter_player_one_name && !enter_pressed && (cursor_time % 1000) < 500) {
        text("|", 200 + (player_one_capitals * 7.5) + ((player_one_name_text.length - player_one_capitals) * 4.5) - (5 * player_one_Is), 184);
        
    }
    if(enter_player_two_name && !enter_pressed && (cursor_time % 1000) < 500) {
        text("|", 200 + (player_two_capitals * 7.5) + ((player_two_name_text.length - player_two_capitals) * 4.5) - (5 * player_two_Is), 257);
        
    }
    
    textAlign(CENTER);
    text(player_one_name_text, 200, 187);
    text(player_two_name_text, 200, 260);
    textAlign(LEFT);

    //Close enter names screen when enter pressed
    if(continue_pressed) {
        
        if(player_one_name_text !== "") {
            player_one_name = player_one_name_text;
            
        } else {
            player_one_name = "Player one";
            
        }
        
        if(player_two_name_text !== "") {
            player_two_name = player_two_name_text;
            
        } else {
            player_two_name = "Player two";
            
        }
        
        continue_pressed = false;
        enter_names = false;
        
    }
};

var end_game_screen = function() {
    end_delay++;
    override_cheat = true;
    
    //Display the end screen after faded to grey
    if(end_delay > delay_time) {
        both_crash = true;
        
        //End game screen base visuals
        fill(110, 110, 110, 190);
        rect(0, 20, 400, 380);
        fill(194, 129, 33);
        rect(75, 45, 250, 310, 20);
        
        textSize(30);
        fill(0, 0, 0);
        text("GAME OVER", 109, 84);
        
        textAlign(CENTER);
        
        //Display on end of one player or two player game
        if(one_player) {
            textSize(25);
            text("Final Score: " + score, 200, 124);
            
            if((high_scores[9] - score + 1) === 1) {
                point_plural = "";
                
            } else {
                point_plural = "s";
                
            }
            
            if(score <= high_scores[9]) {
                text("You need at least", 200, 192);
                text((high_scores[9] - score + 1) + " more point" + point_plural, 200, 218);
                text("for a new highscore", 200, 244);
                
            } else {
                var cursor_time = millis();
                initials_text = [];
                initials_text += initials[0];
                initials_text += initials[1];
                initials_text += initials[2];
                initials.splice(3, 1);
                
                if(mouse_released) {
                    enter_pressed = false;
                    initials_pressed = false;
                    
                }
                
                if(key_pressed && initials.length <  4 && initials_pressed) {
                    add_initial();
                    
                }
                
                textSize(20);
                text("Enter your initials:", 200, 230);
                
                initials_button.draw();
                
                fill(0, 0, 0);
                textSize(35);
                text(initials_text, 200, 280);
                
                Is = 0;
                for(var i = 0; i < initials.length; i++) {
                    
                    if(initials[i] === "I") {
                        Is++;
                        
                    }
                    
                }
                
                if(initials_pressed && !enter_pressed && (cursor_time % 1000) < 500) {
                    text("|", 177 + (place * 21) - (8 * Is), 276);
                    
                }
                
            }
            
            if(perfect_game) {
                
                textSize(25);
                text("Wow, a perfect", 200, 160);
                text("game! Impressive!", 200, 190);
                
            } else if(score > high_scores[9]) {
                
                textSize(25);
                text("Congratulations!", 200, 160);
                text("New high score", 200, 190);
                
            }
        } else if(two_player){
            
            if(tie) {
                
                textSize(80);
                text("Tie", 200, 220);
                
            } else {
                
                textSize(50);
                text("WINS!", 200, 250);
                
                if(player_one_win) {
                    
                    if(player_one_name.length < 6) {
                        textSize(50);
                        
                    } else {
                        textSize(50 - 2.5*player_one_name.length);
                        
                    }
                    
                    text(player_one_name, 200, 168);
                    
                    
                } else if(player_two_win) {
                    
                    if(player_two_name.length < 6) {
                        textSize(50);
                        
                    } else {
                        textSize(50 - 2.5*player_two_name.length);
                        
                    }
                    
                    text(player_two_name, 200, 168);
                    
                }
                
            }
            
        }
        
        textAlign(LEFT);
        
        play_again_button.draw();
        home_screen_button.draw();
        
        //Play again or go home
        if(play_again) {
            game_over = false;
            play_again = false;
            
            add_high_score();
            
            reset_one_player_snake();
            reset_two_player_snakes();
            
        }
        if(go_home) {
            one_player = false;
            two_player = false;
            game_over = false;
            home = true;
            go_home = false;
            
            add_high_score();
            
            reset_home_snake();
            
            
        }
        
    } else if(end_delay >= 0) {
        
        fill(110, 110, 110, (190 / delay_time)*end_delay);
        rect(0, 20, 400, 380);
        
    }
    
    
};

var guide_screen = function() {
    background(186, 163, 108);
    
    //Guide screen base visuals
    textAlign(CENTER);
    textSize(30);
    text("How To Play:", 200, text_y_position);
    textSize(15);
    text("(Hold shift to scroll)", 200, text_y_position + 17);
    textAlign(LEFT);
    textSize(20);
    
    //Display all of the text on the guide screen
    for(var i = 0; i < guide_text.length; i++) {
        
        if(guide_text[i] === "Single Player:" || guide_text[i] === "Two Player:" || guide_text[i] === "Thanks for playing" || guide_text[i] === "Good luck!") {
            text_x_position = 200;
            textAlign(CENTER);
            
        } else {
            text_x_position = 40;
            textAlign(LEFT);
            
        }
        text(guide_text[i], text_x_position, 50 + text_y_position + i * 20);
        
    }
    
    //Rectangles to cover top and bottom for text to hide behind
    fill(186, 163, 108);
    rect(0, 0, 400, 80);
    rect(0, 360, 400, 40);
    
    textSize(55);
    textAlign(CENTER);
    fill(0, 0, 0);
    text("Guide", 200, 50);
    
    textSize(12);
    text("A game by Bradley Scott II | 2020", 200, 390);
    
    back_button_2.draw();
    
    //Back arrow
    strokeWeight(4);
    if(over_back) {
        
        stroke(70, 70, 70);
        
    } else {
        
        stroke(0, 0, 0);
        
    }
    line(20, 18, 10, 30);
    line(20, 42, 10, 30);
    line(40, 30, 11, 30);
    
    //Borders
    stroke(0, 0, 0);
    line(30, 80, 30, 360);
    line(370, 80, 370, 360);
    line(30, 80, 369, 80);
    line(30, 361, 369, 361);
    noStroke();
    
    scroll_button.draw();
    
    if(back_home) {
        reset_home_snake();
        
    }
    
    //Scroll with up and down keys
    if(key_pressed) {
        key_pressed = false;
        if(pressed_key === 38 && scroll_value < 0) {
            scroll_value += 2;
            
        }
        if(pressed_key === 40 && scroll_value > -72) {
            scroll_value -= 2;
            
        }
    }
    
    //Correct scroll_value if it's past it's boundaries
    if(scroll_value > 0) {
        scroll_value = 0;
        
    }
    if(scroll_value < -72) {
        scroll_value = -72;
        
    }
    
    //Figure out text position when scroll bar is pressed
    if(scroll_button_pressed) {
        if(scroll_button.YPosition >= 82 && scroll_button.YPosition <= 223) {
            scroll_button.YPosition = old_Y_position - (click_y_position - mouseY);
            text_y_position = (11229 / 14) - ((285 / 70) * scroll_button.YPosition) - 353;
            scroll_value = (text_y_position - 115) / 8;
            
        }
        if(scroll_button.YPosition < 82) {
            scroll_button.YPosition = 82;
            text_y_position = 115;
            
        }
        if(scroll_button.YPosition >= 223) {
            scroll_button.YPosition = 223;
            text_y_position = -461;
            
        }
        
    } else {
        old_Y_position = scroll_button.YPosition;
        text_y_position = 115 + scroll_value * 8;
        scroll_button.YPosition = 82 - ((70 / 285) * (text_y_position - 115));
        
    }
    
    //Force stop and ends of text
    if(text_y_position > 115) {
        scroll_button.YPosition = 82;
        text_y_position = 115;
        
    }
    if(text_y_position < -461) {
        scroll_button.YPosition = 223;
        text_y_position = -461;
        
    }
};

var draw = function() {
    
    //Which screen to deisplay
    if(home) {
        
        home_screen();
        
    }
    if(settings) {
        
        settings_screen();
        
    }
    if(one_player) {
        
        one_player_screen();
        
    }
    if(two_player) {
        
        two_player_screen();
        
    }
    if(guide) {
        
        guide_screen();
        
    }
    if(game_over) {
        
        end_game_screen();
        
    }
    if(enter_names) {
        
        enter_names_screen();
        
    }
    mouse_released = false;
    
};